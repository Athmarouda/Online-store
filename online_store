
cart = []
inventory = [('Milk box', 1.99, 20),
             ('Chickpeas', 1.59, 100),
             ('Snickers',  0.99, 25)]

def is_float(string):
    """
    This function evaluates whether a string contains a float value or not
    :param string:
    :return: boolean
    """
    try:
        return isinstance(float(string), float)
    except ValueError:
        return False

def is_integer(string):
    """
    This function evaluates whether a string contains a integer value or not
    :param string:
    :return: boolean
    """
    try:
        return isinstance(int(string), int)
    except ValueError:
        return False

def get_valid_input(start, end):
    """
    This function asks the user to provide an integer value between 'start' and 'end'.
    It will be useful to ask for menu options in multiple places of your code logic
    :param start: integer for the starting point of a range
    :param end: integer for the ending point of a range
    :return:
    """
    while True:
        option = input("\nYour option: ")
        if is_integer(option) and start <= int(option) <= end:
            option = int(option)
            break
        print('Please provide a valid input (between {} - {})'.format(start, end))
    return option

def get_item_quantity_from_user(item_num):
    """
    This function asks the user for a valid item quantity
    :param item_num: integer for the item number
    :return: item_qty: integer for the quantity of given item
    """

    for tries in range(0, 3):
        item_qty = int(input('Enter number of quantity you wish to purchase: '))
        if 0 <= item_qty and item_qty <= int(inventory[item_num-1][2]):
            break
        elif item_qty < 0 and -item_qty <= cart[item_num-1]:
            break
        elif tries < 2:
            print("try again invalid inputt: ")

        else:
            item_qty = inventory[item_num-1][2]



    # Ask the user for the item quantity. Remeber to validate the quantity just like
    # in the previous assignment: item_qty has to be within a range of available items,
    # otherwise ask for a valid input again. If at the third time, the user still provides
    # a quantity out of the available items, you have to set item_qty to the maximum items availabale.

    return item_qty

def move_item(item_num, item_qty):
    """
    This function moves an item from either the inventory to the
    user cart or from the user cart to the market
    :param item_num: The item number to be moved
    :param item_qty: The quantity that is going to be moved
    :return:
    """
    if item_qty > 0:
        inventory[item_num-1] = (inventory[item_num-1][0], inventory[item_num-1][1], inventory[item_num-1][2] - item_qty)
        cart[item_num-1] += item_qty

    elif item_qty < 0:
        inventory[item_num - 1] = (inventory[item_num - 1][0], inventory[item_num - 1][1], inventory[item_num - 1][2] - item_qty)
        cart[item_num-1] += item_qty
    prices = [x[1] for x in inventory]
    bill = 0
    for i in range(0, len(cart)):

        bill = float(bill) + float(prices[i])*float(cart[i])

    #bill = calculate_bill()

        # You need to update the inventory and the user's cart. If item_qty is positive,
    # you need to move items from stock to the cart. If the item_qty is negative, items must
    # be moved back from cart to stock. After that, you need to show the current bill

    print("Cart total: ${:.2f}\n".format(bill))

def calculate_bill():
    """
    This function calculates the built based on the items in the cart and the prices in the inventory
    :return: bill: a float with the total bill
    """
    for i in range(0, len(inventory)):
        bill = bill + inventory[i][1] * cart[i]

    # In order to compute the bill you need to iterate over the cart and inventory lists simultaneously
    # so that you can get the price from the inventory and the quantity from the cart at position i on
    # both lists

    return bill

def show_inventory():
    """
    This function shows the inventory available by iteraring over the 'inventory' variable
    :return:
    """
    for num, name in enumerate(inventory, start=1):
        print("{}){}".format(num, name))



    # print('1',inventory[0])
    # print(inventory[1])
    # print(inventory[2])

    # You need to print one inventory item per line
    # Do not forget to include the item number so that the user
    # knows what number to choose for a specific item


def shop_products():
    """
    This function keeps alive the shopping experience until the user decide to finish shopping.
    :return:
    """
    # Reseting the cart variable
    global cart
    cart = [0] * len(inventory)
    show_inventory()
    print('Negative quantities will remove items from cart.\nEnter 0 to finish shopping.')
    item_num = get_valid_input(start=0, end=len(inventory))

    while item_num != 0:
        itemquantity = get_item_quantity_from_user(item_num)
        move_item(item_num, itemquantity)
        show_inventory()
        print('Negative quantities will remove items from cart.\nEnter 0 to finish shopping.')
        item_num = get_valid_input(start=0, end=len(inventory))
    prices = [x[1] for x in inventory]
    bill = 0
    for i in range(0, len(cart)):
        bill = float(bill) + float(prices[i]) * float(cart[i])
    # The program needs to keep offering items to the user until the user decides to
    # finish shopping (option 0). To do so, use the available functions in this file as follows:
    #   1) Show the inventory -> call 'show_inventory()'
    #   2) Get the item_number -> call 'get_valid_input()'
    #   3) Check if user wants to finish shopping -> check if item_num is 0
    #   4) If not, ask for quantity -> call 'get_item_quantity_from_user()'
    #   5) Update the user's cart and stock -> call 'move_item()'

    print("\nYour total is ${:.2f}".format(bill))
    print("\nThanks for shopping at UH")

def add_new_product():
    """
    This function asks the user for the details of the new product
    :return:
    """
    global inventory
    product1 = input('Enter name of product: ')
    while product1 == '':
        print('Invalid input, please try again')
        product1 = input('Enter name of product: ')

    product2 = input('Enter price of product: ')
    while not is_float(product2):
        print('Invalid input, please try again ')
        product2 = input('Enter price of product: ')

    product3 = input('Enter quantity of product: ')
    while not is_integer(product3):
        print('Invalid input, please try again ')
        product3 = input('Enter quantity of product: ')


    newproduct1 = (product1, product2, product3)
    inventory.append(newproduct1)

    manage_inventory()
    # You need to ask for the name, price, and quantity of the product. Each of the product
    # fields needs to be validated. That is, if a bad input is given, the program needs to
    # ask again, until a correct input is provided. A correct input for each field is defined
    # as follows:
    #   - Product name: any string that is not empty or None
    #   - Product price: any string that can be casted to float (call 'is_float()')
    #   - Product quantity: any string that can be casted to integer (call 'is_integer()')
    # Then, you have to append the tuple (name, price, qty) to the inventory list


def update_product():
    """
    This function updates an item from the inventory
    :return:
    """
    global inventory
    itemnum = int(input("Enter the item to update:"))
    while not is_integer(itemnum) and itemnum <= 0 and itemnum > len(inventory):
        print("Invalid input, please try again")
        itemnum = int(input('enter item number: '))
    itemnum = itemnum -1

    product1 = input("Name('"+inventory[itemnum][0]+"'):")
    if product1 == "":
        product1 = inventory[itemnum][0]


    product2 = input("Price('$"+str(inventory[itemnum][1])+"'):")
    while not is_float(product2) and not product2 == "":
        print('Invalid input, please try again ')
        product2 = input('Enter price of product: ')
    if product2 == "":
        product2 = inventory[itemnum][1]

    product3 = input("Quantity('"+str(inventory[itemnum][2])+"'):")
    while not is_integer(product3) and not product3 == "":
        print('Invalid input, please try again ')
        product3 = input('Enter quantity of product: ')
    if product3 == "0":
        product3 = inventory[itemnum][2]

    newproduct1 = (product1, float(product2), int(product3))
    inventory[itemnum] = newproduct1



    # You need to ask to the user for a valid item number (i.e., keep asking until you get a valid item).
    # Then, you need to ask for changes on each of the fields of the product (name, price, quantity), one field at a time.
    # The user can skip changes of a specific field by hitting enter, so you need to check if the provided
    # input is empty (i.e., None) or not. If it is not empty, you have to keep track of this change. Once you have all the changes
    # you need to assign the modified product (i.e., the tuple (name, price, quantity)) where the old product was in the inventory list

    print("Updates are done.")

def remove_product():
    """
    This function removes an item from the inventory variable
    :return:
    """

    global inventory
    removingitem = int(input('Which item would you like to remove? (1-3) or 0 to cancel: your option: '))
    while not (removingitem >=1 and removingitem <=len(inventory)):
        print ('please enter a vaild number between (1-3)')
        removingitem = int(input('Which item would you like to remove? (1-3) or 0 to cancel: your option: '))

    if removingitem == 1:
        del inventory[0]
    elif removingitem == 2:
        del inventory[1]
    elif removingitem == 3:
        del inventory[0]

    if removingitem == 0:
        manage_inventory()
    manage_inventory()






    # You need to remove a product from the inventory. To do so, you have to ask
    # the user for the item that will be removed. Notice that the user can change his/her mind
    # and cancel the deletion by providing 0. If the user provides bad input (neither a 0 nor an item number)
    # the program must ask for a right input again until the right input is provided.

def manage_inventory():
    """
    This function shows to the user the availble options and calls the logic of the program (another function)
    corresponding to the user's choice.
    :return:
    """

    print("Please choose one of the following options (1-5): ")
    print('1) Show inventory\n2) Add a new product\n3) Update a product\n4) Remove a product\n5) Go back to the main menu')
    userchoice = int(input("\nYour option: "))
    while not (userchoice >= 1 and userchoice <= 5):
        print("Please provide a valid input (between 1 - 5)")
        userchoice = int(input('Your Option: '))
    if userchoice >= 1 and userchoice <= 5:
        if userchoice == 1:
            show_inventory()

        elif userchoice == 2:
            add_new_product()

        elif userchoice == 3:
            update_product()

        elif userchoice == 4:
            remove_product()

        elif userchoice == 5:
            main()
    manage_inventory()


    # You need to show and ask the user for one of the following options:
    #
    #   Please choose one of the following options (1 - 5):
    #   1) Show inventory
    #   2) Add a new product
    #   3) Update a product
    #   4) Remove a product
    #   5) Go back to main menu
    #
    # Once the user inputs a valid option (between 1 - 5), you must call the corresponding function.
    # For instance, by choosing 1, the program needs to call the show_inventory() function, and so on.
    # Note that this function must keep asking for options until 5 is provided, in such a case, we stop
    # asking for inputs.

def main():
    print("============================================")
    print("\tWelcome to UH Online Store")
    print("============================================\n")

    while True:
        print("Choose one of the following actions (1-3):")
        print("1) Shop products")
        print("2) Manage inventory")
        print("3) Quit the program")
        option = get_valid_input(start=1, end=3)

        if option == 1:
            shop_products()
        elif option == 2:
            manage_inventory()
        elif option == 3:
            break


    print("Thank you for using our program!")
    exit() #to exist the program becuase without this function in my program the function wont quit if 3 was selected, it will keep iterating the manage inventory function.


if __name__ == '__main__':
    main()
